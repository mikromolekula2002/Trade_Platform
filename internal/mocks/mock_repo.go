// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/mikromolekula2002/Trade_Platform/internal/models"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// DelLikes mocks base method.
func (m *MockUserRepository) DelLikes(userlogin, adsId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelLikes", userlogin, adsId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelLikes indicates an expected call of DelLikes.
func (mr *MockUserRepositoryMockRecorder) DelLikes(userlogin, adsId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelLikes", reflect.TypeOf((*MockUserRepository)(nil).DelLikes), userlogin, adsId)
}

// DelUser mocks base method.
func (m *MockUserRepository) DelUser(login string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelUser", login)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelUser indicates an expected call of DelUser.
func (mr *MockUserRepositoryMockRecorder) DelUser(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelUser", reflect.TypeOf((*MockUserRepository)(nil).DelUser), login)
}

// DelUserAds mocks base method.
func (m *MockUserRepository) DelUserAds(userID, adsID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelUserAds", userID, adsID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelUserAds indicates an expected call of DelUserAds.
func (mr *MockUserRepositoryMockRecorder) DelUserAds(userID, adsID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelUserAds", reflect.TypeOf((*MockUserRepository)(nil).DelUserAds), userID, adsID)
}

// DelUserData mocks base method.
func (m *MockUserRepository) DelUserData(login string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelUserData", login)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelUserData indicates an expected call of DelUserData.
func (mr *MockUserRepositoryMockRecorder) DelUserData(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelUserData", reflect.TypeOf((*MockUserRepository)(nil).DelUserData), login)
}

// GetAllAds mocks base method.
func (m *MockUserRepository) GetAllAds() ([]*models.UserAds, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAds")
	ret0, _ := ret[0].([]*models.UserAds)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAds indicates an expected call of GetAllAds.
func (mr *MockUserRepositoryMockRecorder) GetAllAds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAds", reflect.TypeOf((*MockUserRepository)(nil).GetAllAds))
}

// GetAllLikes mocks base method.
func (m *MockUserRepository) GetAllLikes(userLogin string) ([]*models.Likes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllLikes", userLogin)
	ret0, _ := ret[0].([]*models.Likes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllLikes indicates an expected call of GetAllLikes.
func (mr *MockUserRepositoryMockRecorder) GetAllLikes(userLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllLikes", reflect.TypeOf((*MockUserRepository)(nil).GetAllLikes), userLogin)
}

// GetOneAds mocks base method.
func (m *MockUserRepository) GetOneAds(adsID string) (*models.UserAds, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneAds", adsID)
	ret0, _ := ret[0].(*models.UserAds)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneAds indicates an expected call of GetOneAds.
func (mr *MockUserRepositoryMockRecorder) GetOneAds(adsID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneAds", reflect.TypeOf((*MockUserRepository)(nil).GetOneAds), adsID)
}

// GetUser mocks base method.
func (m *MockUserRepository) GetUser(login string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", login)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserRepositoryMockRecorder) GetUser(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserRepository)(nil).GetUser), login)
}

// GetUserAds mocks base method.
func (m *MockUserRepository) GetUserAds(login string) ([]*models.UserAds, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAds", login)
	ret0, _ := ret[0].([]*models.UserAds)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAds indicates an expected call of GetUserAds.
func (mr *MockUserRepositoryMockRecorder) GetUserAds(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAds", reflect.TypeOf((*MockUserRepository)(nil).GetUserAds), login)
}

// GetUserData mocks base method.
func (m *MockUserRepository) GetUserData(login string) (*models.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserData", login)
	ret0, _ := ret[0].(*models.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserData indicates an expected call of GetUserData.
func (mr *MockUserRepositoryMockRecorder) GetUserData(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserData", reflect.TypeOf((*MockUserRepository)(nil).GetUserData), login)
}

// SaveLikes mocks base method.
func (m *MockUserRepository) SaveLikes(likes *models.Likes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLikes", likes)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveLikes indicates an expected call of SaveLikes.
func (mr *MockUserRepositoryMockRecorder) SaveLikes(likes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLikes", reflect.TypeOf((*MockUserRepository)(nil).SaveLikes), likes)
}

// SaveUser mocks base method.
func (m *MockUserRepository) SaveUser(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockUserRepositoryMockRecorder) SaveUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockUserRepository)(nil).SaveUser), user)
}

// SaveUserAds mocks base method.
func (m *MockUserRepository) SaveUserAds(userAds *models.UserAds) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserAds", userAds)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUserAds indicates an expected call of SaveUserAds.
func (mr *MockUserRepositoryMockRecorder) SaveUserAds(userAds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserAds", reflect.TypeOf((*MockUserRepository)(nil).SaveUserAds), userAds)
}

// SaveUserData mocks base method.
func (m *MockUserRepository) SaveUserData(userData *models.UserData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserData", userData)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUserData indicates an expected call of SaveUserData.
func (mr *MockUserRepositoryMockRecorder) SaveUserData(userData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserData", reflect.TypeOf((*MockUserRepository)(nil).SaveUserData), userData)
}

// UpdatePassword mocks base method.
func (m *MockUserRepository) UpdatePassword(login, hashPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", login, hashPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockUserRepositoryMockRecorder) UpdatePassword(login, hashPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockUserRepository)(nil).UpdatePassword), login, hashPassword)
}

// UpdateUserAds mocks base method.
func (m *MockUserRepository) UpdateUserAds(userAds *models.UserAds) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserAds", userAds)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserAds indicates an expected call of UpdateUserAds.
func (mr *MockUserRepositoryMockRecorder) UpdateUserAds(userAds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserAds", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserAds), userAds)
}

// UpdateUserData mocks base method.
func (m *MockUserRepository) UpdateUserData(userData *models.UserData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserData", userData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserData indicates an expected call of UpdateUserData.
func (mr *MockUserRepositoryMockRecorder) UpdateUserData(userData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserData", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserData), userData)
}
