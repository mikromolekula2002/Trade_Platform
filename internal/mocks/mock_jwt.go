// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/jwt/jwt.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	jwt "github.com/mikromolekula2002/Trade_Platform/internal/jwt"
)

// MockJWTService is a mock of JWTService interface.
type MockJWTService struct {
	ctrl     *gomock.Controller
	recorder *MockJWTServiceMockRecorder
}

// MockJWTServiceMockRecorder is the mock recorder for MockJWTService.
type MockJWTServiceMockRecorder struct {
	mock *MockJWTService
}

// NewMockJWTService creates a new mock instance.
func NewMockJWTService(ctrl *gomock.Controller) *MockJWTService {
	mock := &MockJWTService{ctrl: ctrl}
	mock.recorder = &MockJWTServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTService) EXPECT() *MockJWTServiceMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MockJWTService) CreateToken(userLogin, jwtKey string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", userLogin, jwtKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockJWTServiceMockRecorder) CreateToken(userLogin, jwtKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockJWTService)(nil).CreateToken), userLogin, jwtKey)
}

// DeleteToken mocks base method.
func (m *MockJWTService) DeleteToken(userLogin, jwtKey string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteToken", userLogin, jwtKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteToken indicates an expected call of DeleteToken.
func (mr *MockJWTServiceMockRecorder) DeleteToken(userLogin, jwtKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteToken", reflect.TypeOf((*MockJWTService)(nil).DeleteToken), userLogin, jwtKey)
}

// ExtractToken mocks base method.
func (m *MockJWTService) ExtractToken(tokenString, jwtKey string) (*jwt.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractToken", tokenString, jwtKey)
	ret0, _ := ret[0].(*jwt.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractToken indicates an expected call of ExtractToken.
func (mr *MockJWTServiceMockRecorder) ExtractToken(tokenString, jwtKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractToken", reflect.TypeOf((*MockJWTService)(nil).ExtractToken), tokenString, jwtKey)
}

// VerifyToken mocks base method.
func (m *MockJWTService) VerifyToken(tokenString, jwtKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", tokenString, jwtKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockJWTServiceMockRecorder) VerifyToken(tokenString, jwtKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockJWTService)(nil).VerifyToken), tokenString, jwtKey)
}
